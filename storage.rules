rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function hasRole(role) {
      return isAuthenticated() && 
             firestore.get(/databases/(default)/documents/users/$(request.auth.uid)).data.role == role;
    }
    
    function isAdmin() {
      return hasRole('ADMIN');
    }
    
    function isRealtor() {
      return hasRole('REALTOR') || isAdmin();
    }
    
    function isAssistant() {
      return hasRole('ASSISTANT') || isRealtor();
    }
    
    function isValidImageType() {
      return resource.contentType.matches('image/.*');
    }
    
    function isValidDocumentType() {
      return resource.contentType.matches('application/pdf') ||
             resource.contentType.matches('application/msword') ||
             resource.contentType.matches('application/vnd.openxmlformats-officedocument.wordprocessingml.document') ||
             resource.contentType.matches('text/plain');
    }
    
    function isValidFileSize(maxSizeInMB) {
      return resource.size < maxSizeInMB * 1024 * 1024;
    }
    
    // User profile images
    match /users/{userId}/profile/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId) && 
                      isValidImageType() && 
                      isValidFileSize(5); // 5MB limit
    }
    
    // Property images
    match /properties/{propertyId}/images/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && 
                      isAssistant() && 
                      isValidImageType() && 
                      isValidFileSize(10); // 10MB limit
    }
    
    // Property documents
    match /properties/{propertyId}/documents/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && 
                      isAssistant() && 
                      (isValidDocumentType() || isValidImageType()) && 
                      isValidFileSize(50); // 50MB limit
    }
    
    // User documents (contracts, agreements, etc.)
    match /users/{userId}/documents/{fileName} {
      allow read: if isOwner(userId) || isAdmin();
      allow write: if isOwner(userId) && 
                      (isValidDocumentType() || isValidImageType()) && 
                      isValidFileSize(100); // 100MB limit
    }
    
    // Transaction documents
    match /transactions/{transactionId}/documents/{fileName} {
      allow read: if isAuthenticated() && isAssistant();
      allow write: if isAuthenticated() && 
                      isAssistant() && 
                      (isValidDocumentType() || isValidImageType()) && 
                      isValidFileSize(100); // 100MB limit
    }
    
    // Communication attachments
    match /communications/{communicationId}/attachments/{fileName} {
      allow read: if isAuthenticated() && isAssistant();
      allow write: if isAuthenticated() && 
                      isAssistant() && 
                      (isValidDocumentType() || isValidImageType()) && 
                      isValidFileSize(25); // 25MB limit
    }
    
    // Email campaign assets
    match /campaigns/{campaignId}/assets/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && 
                      isRealtor() && 
                      isValidImageType() && 
                      isValidFileSize(5); // 5MB limit
    }
    
    // Public assets (logos, branding, etc.)
    match /public/{fileName} {
      allow read: if true;
      allow write: if isAdmin() && 
                      isValidImageType() && 
                      isValidFileSize(10); // 10MB limit
    }
    
    // Temporary uploads (24-hour expiry)
    match /temp/{userId}/{fileName} {
      allow read, write: if isOwner(userId) && 
                            isValidFileSize(100) && // 100MB limit
                            resource.timeCreated > timestamp.date(2024, 1, 1); // Prevent old files
    }
    
    // System backups (admin only)
    match /backups/{fileName} {
      allow read, write: if isAdmin();
    }
  }
}